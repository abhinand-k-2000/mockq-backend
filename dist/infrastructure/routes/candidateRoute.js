"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const router = express_1.default.Router();
const candidateController_1 = __importDefault(require("../../adaptors/controllers/candidateController"));
const candidateUseCase_1 = __importDefault(require("../../use-cases/candidateUseCase"));
const candidateRepository_1 = __importDefault(require("../repository/candidateRepository"));
const notificationRepository_1 = __importDefault(require("../repository/notificationRepository"));
const generateOtp_1 = __importDefault(require("../utils/generateOtp"));
const JwtToken_1 = __importDefault(require("../utils/JwtToken"));
const mailService_1 = __importDefault(require("../utils/mailService"));
const hashPassword_1 = __importDefault(require("../utils/hashPassword"));
const candidateAuth_1 = __importDefault(require("../middlewares/candidateAuth"));
const candidateRepository = new candidateRepository_1.default();
const notificationRepository = new notificationRepository_1.default();
const otp = new generateOtp_1.default();
const jwt = new JwtToken_1.default(process.env.JWT_SECRET);
const mail = new mailService_1.default();
const hashPassword = new hashPassword_1.default();
const candidateCase = new candidateUseCase_1.default(candidateRepository, otp, jwt, mail, hashPassword, notificationRepository);
const controller = new candidateController_1.default(candidateCase);
router.post('/verify-email', (req, res, next) => { controller.verifyCadidateEmail(req, res, next); });
router.post('/verify-otp', (req, res, next) => controller.verifyOtp(req, res, next));
router.post('/verify-login', (req, res, next) => controller.verifyLogin(req, res, next));
router.post('/resend-otp', (req, res, next) => controller.resendOtp(req, res, next));
router.post('/logout', (req, res, next) => controller.logout(req, res, next));
router.get('/home', candidateAuth_1.default, (req, res, next) => controller.home(req, res, next));
router.get('/get-interviewers', (req, res, next) => controller.getInterviewersByTech(req, res, next));
router.get('/get-interviewer-slots-details/:interviewerId', (req, res, next) => controller.getInterviewerSlotsDetails(req, res, next));
// router.put('/book-slot', (req, res, next) => controller.bookSlot(req, res, next))
router.get('/get-scheduled-interviews', candidateAuth_1.default, (req, res, next) => controller.getScheduledInterviewList(req, res, next));
router.post('/forgot-password', (req, res, next) => controller.handleForgotPassword(req, res, next));
router.post('/reset-password', (req, res, next) => controller.resetPassword(req, res, next));
router.get('/get-feedback-details', candidateAuth_1.default, (req, res, next) => controller.getFeedbackDetails(req, res, next));
router.get('/is-premium', candidateAuth_1.default, (req, res, next) => controller.handleCandidatePremium(req, res, next));
router.get('/get-all-premium-users', candidateAuth_1.default, (req, res, next) => controller.getAllPremiumCandidates(req, res, next));
router.post('/give-interviewer-rating', candidateAuth_1.default, (req, res, next) => controller.saveInterviewerRating(req, res, next));
router.get('/get-analytics', candidateAuth_1.default, (req, res, next) => controller.getCandidateAnalytics(req, res, next));
router.post('/verify-video-conference', candidateAuth_1.default, (req, res, next) => controller.verifyVideoConference(req, res, next));
router.get('/get-notifications', candidateAuth_1.default, (req, res, next) => controller.getNotifications(req, res, next));
exports.default = router;
